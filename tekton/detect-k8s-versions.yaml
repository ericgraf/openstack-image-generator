
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: start-detect-k8s-version-cronjob
spec:
  schedule: "*/10 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: trigger-event-k8s-detect
            image: curlimages/curl
            args: ["curl", "-X", "POST", "--data", "{}", "el-detect-k8s-versions-event-listener.default.svc.cluster.local:8080"]
          restartPolicy: Never

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-triggers-sa

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: triggers-example-eventlistener-binding
subjects:
- kind: ServiceAccount
  name: tekton-triggers-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-roles

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: triggers-example-eventlistener-clusterbinding
subjects:
- kind: ServiceAccount
  name: tekton-triggers-sa
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tekton-triggers-eventlistener-clusterroles

---
apiVersion: triggers.tekton.dev/v1beta1
kind: EventListener
metadata:
  name: detect-k8s-versions-event-listener
spec:
  serviceAccountName: tekton-triggers-sa
  triggers:
    - name: detect-k8s-versions-cron-listener
      template:
        ref: detect-k8s-versions-trigger-template


---
apiVersion: triggers.tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: detect-k8s-versions-trigger-template
spec:
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: k8s-detect
    spec:
      params:
      - name: excludeReleasesList
        value: "v1.21.0 v1.21.1 v1.21.2 v1.21.3 v1.21.4 v1.21.5 v1.21.6 v1.21.7 v1.21.8 v1.22.0 v1.22.1 v1.22.2 v1.22.3 v1.22.4 v1.22.5 v1.22.6 v1.22.7 v1.22.8 v1.23.0 v1.23.1 v1.23.2 v1.23.3 v1.23.4 v1.24.0-alpha.2 v1.24.0-alpha.1 v1.24.0-rc.1 v1.24.0-rc.0 v1.24.0-beta.0 v1.24.0-alpha.3 v1.24.0-alpha.4"
      pipelineRef:
        name: detect-k8s-versions
      workspaces:
      - name: secrets
        secret:
          secretName: aws-credentials   

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: detect-k8s-versions
spec:
  params:
  - name: excludeReleasesList
  workspaces:
  - name: secrets
  results:
  - name: k8s-releases
    value: $(tasks.get-k8s-releases.results.releases)
  tasks:
    - name: get-k8s-releases
      taskSpec:
        results:
        - name: releases
        steps:
        - name: get-k8s-releases
          onError: continue
          image: curlimages/curl
          script: |-
            curl --silent "https://api.github.com/repos/kubernetes/kubernetes/releases" | \
              grep tag_name | \
              awk -F '\"' '{print $4}' > $(results.releases.path)
            cat -e $(results.releases.path)

    - name: get-s3-existing-image
      workspaces:
      - name: secrets
        workspace: secrets
      taskSpec:
        results:
        - name: existingS3
        workspaces:
          - name: secrets
            optional: true
            mountPath: /root/.aws

        steps:
          - name: get-s3-existing-image
            image: docker.io/amazon/aws-cli:2.0.52@sha256:1506cec98a7101c935176d440a14302ea528b8f92fcaf4a6f1ea2d7ecef7edc4 #tag: 2.0.52
            script: |
              aws $1 $(cat /root/.aws/cli-params) ls s3://$(cat /root/.aws/bucket-name)/ | \
                grep ubuntu-2004-kube | \
                sed 's/\///g' |\
                awk -F 'ubuntu-2004-kube-' '{print $2}' \
                > $(results.existingS3.path)

              cat -e $(results.existingS3.path)
            args:
            - s3
        
      
    - name: start-k8s-build
      runAfter:
        - get-k8s-releases
        - get-s3-existing-image
      params:
      - name: releases
        value: "$(tasks.get-k8s-releases.results.releases)"
      - name: existingReleases
        value: "$(tasks.get-s3-existing-image.results.existingS3)"
      - name: excludeReleasesList
        value: "$(params.excludeReleasesList)"
      taskSpec:
        params:
        - name: releases
        - name: existingReleases
        - name: excludeReleasesList
        steps:
        - name: detect-start-k8s-build
          onError: continue
          env:
          - name: releases
            value: "$(params.releases)"
          - name: existingReleases
            value: "$(params.existingReleases)"
          - name: excludeReleasesList
            value: "$(params.excludeReleasesList)"
          image: curlimages/curl
          script: |-
            #set -x
            #echo "$releases" 
            #echo $existingReleases 
            for release in $releases
            do
              echo "Release: $release";
              if $( echo $existingReleases | grep -q "$release" ); then
                echo "It's already there."
              elif $( echo $excludeReleasesList | grep -q "$release" ); then
                echo "It's in the exclude list."
              else
                echo "Need to add release:  $release"
                curl -X POST \
                  --silent \
                  http://el-k8s-build-event-listener.default.svc.cluster.local:8080 \
                  -H 'Content-Type: application/json' \
                  -d "{
                    \"k8s\":
                    {
                      \"version\": \"${release#v}\"
                    }
                  }"
                  
                  #TODO add concurrency since tekton doesn't support it.
                  echo "Triggering only 1 build at a time"
                  exit 0
              fi

            done

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cleaner
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cleaner
rules:
  - apiGroups: ["tekton.dev"]
    resources: ["pipelineruns"]
    verbs: ["delete", "get", "watch", "list"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: cleaner-to-cleaner
roleRef:
  kind: Role
  name: cleaner
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: cleaner

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: cleanup-pipelineruns
spec:
  schedule: "*/15 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccount: cleaner
          containers:
            - name: kubectl
              image: ghcr.io/ctron/kubectl:latest
              env:
                - name: NUM_TO_KEEP
                  value: "3"
              command:
                - /bin/bash
                - -c
                - |
                    TO_DELETE="$(kubectl get pipelinerun -o jsonpath='{range .items[?(@.status.completionTime)]}{.status.completionTime}{" "}{.metadata.name}{"\n"}{end}' \
                    | grep k8s-detect \
                    | sort \
                    | head -n -${NUM_TO_KEEP} \
                    | awk '{ print $2}')"
                    test -n "$TO_DELETE" && kubectl delete pipelinerun ${TO_DELETE} || true